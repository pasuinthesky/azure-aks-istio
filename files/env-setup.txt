
AZURE_RESOURCE_GROUP_NAME=flux-istio-demo
AZURE_LOCATION=eastus2

export CLOUD_PLATFORM="${CLOUD_PLATFORM:-azure}"
if [ "$CLOUD_PLATFORM" = "aws" ]; then export MY_DOMAIN=${MY_DOMAIN:-aws-canary.dev}; fi
if [ "$CLOUD_PLATFORM" = "azure" ]; then export MY_DOMAIN=${MY_DOMAIN:-azure-canary.dev}; fi
export LETSENCRYPT_ENVIRONMENT=${LETSENCRYPT_ENVIRONMENT:-staging}
echo "*** ${CLOUD_PLATFORM} | ${MY_DOMAIN} | ${LETSENCRYPT_ENVIRONMENT} ***"



curl -L https://aka.ms/InstallAzureCli | bash

az login

ARM_SUBSCRIPTION_ID=$(az account list | jq -r '.[] | select (.isDefault == true).id')
az ad sp create-for-rbac --role="Contributor" --scopes="/subscriptions/${ARM_SUBSCRIPTION_ID}" | jq
# Output:
{
  "appId": "69d21cbd-476d-4e57-ab02-feaef806fb74",
  "displayName": "azure-cli-2021-12-23-21-12-48",
  "name": "69d21cbd-476d-4e57-ab02-feaef806fb74",
  "password": "zoy27~Bp6mWX1c.i0KfaswRvRCfwCnxEmp",
  "tenant": "6f440e3c-d03f-4b69-83fc-11acc470e8ce"
}

# End of Output


ARM_CLIENT_ID="69d21cbd-476d-4e57-ab02-feaef806fb74"
ARM_CLIENT_SECRET="zoy27~Bp6mWX1c.i0KfaswRvRCfwCnxEmp"
ARM_TENANT_ID=`az ad sp show --id ${ARM_CLIENT_ID}|jq -r .appOwnerTenantId`

az keyvault secret set -n sp-flux-istio --vault-name myVault-3721 --value ${ARM_CLIENT_ID}
az keyvault secret set -n sp-flux-istio-secret --vault-name myVault-3721 --value ${ARM_CLIENT_SECRET}

az login --service-principal -u ${ARM_CLIENT_ID} \
 -p ${ARM_CLIENT_SECRET} \
 --tenant ${ARM_TENANT_ID} | jq

# Output:
[
  {
    "cloudName": "AzureCloud",
    "homeTenantId": "6f440e3c-d03f-4b69-83fc-11acc470e8ce",
    "id": "b7135393-f28b-4a35-b97a-6b68abbd309e",
    "isDefault": true,
    "managedByTenants": [],
    "name": "Azure subscription 1",
    "state": "Enabled",
    "tenantId": "6f440e3c-d03f-4b69-83fc-11acc470e8ce",
    "user": {
      "name": "69d21cbd-476d-4e57-ab02-feaef806fb74",
      "type": "servicePrincipal"
    }
  }
]

# End of Output

az role assignment create --assignee 69d21cbd-476d-4e57-ab02-feaef806fb74 --role "Contributor"
az role assignment create --role "Key Vault Reader" --assignee 69d21cbd-476d-4e57-ab02-feaef806fb74 --scope /subscriptions/b7135393-f28b-4a35-b97a-6b68abbd309e/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVault-3721

az group list -o table # Just to verify

az group create --name ${AZURE_RESOURCE_GROUP_NAME}-dns --location ${AZURE_LOCATION}
az network dns zone create -g ${AZURE_RESOURCE_GROUP_NAME}-dns -n ${MY_DOMAIN} 
az network dns zone show -g ${AZURE_RESOURCE_GROUP_NAME}-dns -n ${MY_DOMAIN} -o json | jq
# Output:
{
  "etag": "00000002-0000-0000-da41-4b7e47f8d701",
  "id": "/subscriptions/b7135393-f28b-4a35-b97a-6b68abbd309e/resourceGroups/flux-istio-demo-dns/providers/Microsoft.Network/dnszones/azure-canary.dev",
  "location": "global",
  "maxNumberOfRecordSets": 10000,
  "maxNumberOfRecordsPerRecordSet": null,
  "name": "azure-canary.dev",
  "nameServers": [
    "ns1-05.azure-dns.com.",
    "ns2-05.azure-dns.net.",
    "ns3-05.azure-dns.org.",
    "ns4-05.azure-dns.info."
  ],
  "numberOfRecordSets": 2,
  "registrationVirtualNetworks": null,
  "resolutionVirtualNetworks": null,
  "resourceGroup": "flux-istio-demo-dns",
  "tags": {},
  "type": "Microsoft.Network/dnszones",
  "zoneType": "Public"
}

# End of Output

dig +short -t SOA ${MY_DOMAIN} @ns1-05.azure-dns.com
# Verify dns zone setup

test -f $HOME/.ssh/id_rsa || ( install -m 0700 -d $HOME/.ssh && ssh-keygen -b 2048 -t rsa -f $HOME/.ssh/id_rsa -q -N "" )

cd ~/git
if [ ! -d .git ]; then
  git clone git@github.com:pasuinthesky/k8s-flagger-istio-flux.git && cd k8s-flagger-istio-flux
fi

export ARM_CLIENT_ID
export ARM_CLIENT_SECRET
export ARM_SUBSCRIPTION_ID
export ARM_TENANT_ID


terraform init
terraform apply  -auto-approve

istioctl operator init

kubectl apply -f - <<EOF
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: istio-system
  name: example-istiocontrolplane
spec:
  profile: demo
EOF

k apply -f https://raw.githubusercontent.com/istio/istio/master/samples/addons/kiali.yaml
k apply -f https://raw.githubusercontent.com/istio/istio/master/samples/addons/grafana.yaml
k apply -f https://raw.githubusercontent.com/istio/istio/master/samples/addons/prometheus.yaml
k apply -f https://raw.githubusercontent.com/istio/istio/master/samples/addons/jaeger.yaml



export INGRESS_DOMAIN="azaks.dev"
CERT_DIR=/tmp/certs
mkdir -p ${CERT_DIR}
openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj "/O=example Inc./CN=*.${INGRESS_DOMAIN}" -keyout ${CERT_DIR}/ca.key -out ${CERT_DIR}/ca.crt
openssl req -out ${CERT_DIR}/cert.csr -newkey rsa:2048 -nodes -keyout ${CERT_DIR}/tls.key -subj "/CN=*.${INGRESS_DOMAIN}/O=example organization"
openssl x509 -req -days 365 -CA ${CERT_DIR}/ca.crt -CAkey ${CERT_DIR}/ca.key -set_serial 0 -in ${CERT_DIR}/cert.csr -out ${CERT_DIR}/tls.crt
kubectl create -n istio-system secret tls telemetry-gw-cert --key=${CERT_DIR}/tls.key --cert=${CERT_DIR}/tls.crt

cat <<EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: kiali-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https-kiali
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: telemetry-gw-cert
    hosts:
    - "kiali.${INGRESS_DOMAIN}"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: kiali-vs
  namespace: istio-system
spec:
  hosts:
  - "kiali.${INGRESS_DOMAIN}"
  gateways:
  - kiali-gateway
  http:
  - route:
    - destination:
        host: kiali
        port:
          number: 20001
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: kiali
  namespace: istio-system
spec:
  host: kiali
  trafficPolicy:
    tls:
      mode: DISABLE
---
EOF



###########
# canary
###########

cat <<EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: public-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
EOF

kubectl create ns test
kubectl label namespace test istio-injection=enabled

kubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main
kubectl apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main

k apply -f podinfo-canary.yaml
k get vs,destinationrule,deploy,svc,po,canary,hpa -n test

cat <<EOF | k apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: podinfo-gateway
  namespace: test
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
EOF


kubectl -n test set image deployment/podinfo \
podinfod=stefanprodan/podinfo:3.1.2

watch 'kubectl get deployment -n test -o json | jq .items[].spec.template.spec.containers[0].image'
